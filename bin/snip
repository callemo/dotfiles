#!/usr/bin/env python3
"""Expand text snippets."""
import sys
import os


class CodeGenerator:
    def __init__(self, tab="\t"):
        self.tab = tab
        self.level = 0
        self.lines = []

    def write(self, line):
        self.lines.append(self.tab * self.level + line)

    def indent(self):
        self.level += 1

    def dedent(self):
        if self.level < 1:
            raise IndentationError("code generator line: {len(self.lines)}")
        self.level -= 1

    def text(self):
        return "\n".join(self.lines)


class Snippet:
    def __init__(self, name, args=None, tab="\t"):
        if not args:
            args = []
        self.name = name
        self.args = args
        self.tab = tab
        self.code = CodeGenerator(self.tab)

    def __repr__(self):
        return f"{self.__class__.__name__}:[name:{self.name} args:{self.args}]"

    def expand(self, args=None):
        if args:
            self.args = args
        return getattr(self, "expand_" + self.name)()

    def expand_shopts(self):
        optstring = self.args[0] if self.args else "abc:"
        self.code.write(f"while getopts {optstring} f")
        self.code.write("do")
        self.code.indent()
        self.code.write("case $f in")
        last = len(optstring) - 1
        for i, v in enumerate(optstring):
            if v == ":":
                continue
            if i < last and optstring[i + 1] == ":":
                self.code.write(f"{v})  {v}arg=$OPTARG;;")
            else:
                self.code.write(f"{v})  {v}flag=$f;;")
        self.code.write('\\?) echo "$USAGE"; exit 1;;')
        self.code.write("esac")
        self.code.dedent()
        self.code.write("done")
        self.code.write("shift $((OPTIND - 1))")
        return self.code.text()

    def expand_pyargs(self):
        self.code.write("parser = argparse.ArgumentParser()")
        self.code.write('parser.add_argument("")')
        self.code.write("args = parser.parse_args()")
        return self.code.text()


def main():
    if len(sys.argv) < 2:
        raise SystemExit(f"usage: {os.path.basename(sys.argv[0])} snippet [args ...]")
    s = Snippet(sys.argv[1], sys.argv[2:])
    print(s.expand())


main()
