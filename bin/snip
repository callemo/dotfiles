#!/usr/bin/env python3
"""Expand text snippets."""
import argparse
import datetime
import re
import sys

# Dictionary of snippets
SNIPPETS = {}


def main():
    parser = argparse.ArgumentParser(description="Expand text snippets.")
    parser.add_argument("-t", "--tab", default="\t", help="indent string")
    parser.add_argument(
        "-l", "--list", action="store_true", help="list available snippets"
    )
    parser.add_argument("snippet", nargs="?", help="name of the snippet to expand")
    parser.add_argument("args", nargs="*", help="arguments to pass to the snippet")

    args = parser.parse_args()

    # List snippets or show help if no snippet provided
    if args.list or not args.snippet:
        print_snippet_list()
        return

    # Get and call the snippet function
    snippet_func = SNIPPETS.get(args.snippet)
    if not snippet_func:
        print(f"Unknown snippet: {args.snippet}", file=sys.stderr)
        print_snippet_list()
        return 1

    # Expand the snippet and print it
    code = expand_snippet(snippet_func, args.args, args.tab)
    print(code)


def print_snippet_list():
    """Print all available snippets with their descriptions."""
    if not SNIPPETS:
        return

    print("\nAvailable snippets:")

    # Find the longest snippet name for formatting
    max_name_len = max(len(name) for name in SNIPPETS)
    fmt = f"  %-{max_name_len}s - %s"

    # Print snippets in a table-like format
    for name, func in sorted(SNIPPETS.items()):
        doc = func.__doc__ or ""
        print(fmt % (name, doc))


def expand_snippet(func, args=None, tab="\t"):
    """Expand a snippet using the given function and arguments."""
    if args is None:
        args = []

    builder = IndentBuilder(tab)
    result = func(builder, args)
    return result if result is not None else builder.text()


class IndentBuilder:
    """Generates indented code."""

    def __init__(self, tab="\t"):
        self.tab = tab
        self.level = 0
        self.lines = []

    def write(self, line):
        """Add a line with proper indentation."""
        self.lines.append(self.tab * self.level + line)
        return self

    def indent(self):
        """Increase indentation level."""
        self.level += 1
        return self

    def dedent(self):
        """Decrease indentation level."""
        if self.level < 1:
            raise IndentationError(
                f"Cannot dedent past level 0 at line {len(self.lines)}"
            )
        self.level -= 1
        return self

    def text(self):
        """Return the complete text."""
        return "\n".join(self.lines)


# Snippet implementations


def _expand_shlog(builder, args):
    """Shell logging."""
    builder.write('prefix="${0##*/}:"')
    builder.write('log() { echo "$prefix" "$@" >&2; }')
    builder.write('fatal() { log "$@"; exit 1; }')


def _expand_shopts(builder, args):
    """Shell options."""
    optstring = args[0] if args else ":abc:"
    if optstring[0] != ":":
        optstring = ":" + optstring

    builder.write("usage() { sed -En '2,/^[^#]/ s/^# //p' \"$0\" >&2; }")
    builder.write("")
    builder.write(f"while getopts {optstring} f")
    builder.write("do")
    builder.indent()
    builder.write("case $f in")

    last = len(optstring) - 1
    for i, v in enumerate(optstring):
        if v == ":":
            continue
        if i < last and optstring[i + 1] == ":":
            builder.write(f"{v})  {v}arg=$OPTARG;;")
        else:
            builder.write(f"{v})  {v}flag=$f;;")

    builder.write("\\?) usage; exit 2;;")
    builder.write("esac")
    builder.dedent()
    builder.write("done")
    builder.write("shift $((OPTIND - 1))")


def _expand_shdir(builder, args):
    """Shell program directory."""
    builder.write('progdir="$(cd "${0%/*}" && pwd -P)"')


def _expand_shcase(builder, args):
    """Shell case statement."""
    builder.write("case $1 in")
    builder.indent()

    for arg in args:
        builder.write(f"{arg}) {arg};;")

    builder.write("* ) usage; exit 2;;")
    builder.dedent()
    builder.write("esac")


def _expand_pyargs(builder, args):
    """Python command line arguments."""
    optstring = args[0] if args else "abc:"

    builder.write("parser = argparse.ArgumentParser()")

    last = len(optstring) - 1
    for i, v in enumerate(optstring):
        if v == ":":
            continue
        if i < last and optstring[i + 1] == ":":
            builder.write(f'parser.add_argument("-{v}")')
        else:
            builder.write(f'parser.add_argument("-{v}", action="store_true")')

    builder.write("args = parser.parse_args()")


def _expand_pyfilter(builder, args):
    """Python command line filter."""
    builder.write("#!/usr/bin/env python3")
    builder.write('"""Command line filter."""')
    builder.write("import argparse")
    builder.write("import fileinput")
    builder.write("import os")
    builder.write("import sys")
    builder.write("")
    builder.write("def main():")
    builder.indent()
    builder.write("parser = argparse.ArgumentParser()")
    builder.write('parser.add_argument("files", nargs="*")')
    builder.write("args = parser.parse_args()")
    builder.write("with fileinput.input(files=args.files) as f:")
    builder.indent()
    builder.write("for line in f:")
    builder.indent()
    builder.write('print(line, end="")')
    builder.dedent()
    builder.dedent()
    builder.dedent()
    builder.write("")
    builder.write("try:")
    builder.indent()
    builder.write("main()")
    builder.write("sys.stdout.flush()")
    builder.dedent()
    builder.write("except (BrokenPipeError, KeyboardInterrupt):")
    builder.indent()
    builder.write("os.dup2(os.open(os.devnull, os.O_WRONLY), sys.stdout.fileno())")
    builder.dedent()


def _expand_pydir(builder, args):
    """Python program directory."""
    builder.write("progdir = os.path.realpath(os.path.dirname(__file__))")


def _expand_nfile(builder, args):
    """Note file name."""
    note_id = datetime.datetime.today().strftime("%Y%m%d%H%M")
    title = "_".join(args)
    title = re.sub("[^A-Za-z_-]", "", title)
    return note_id + "-" + title.lower() + ".txt"


def _expand_nmeta(builder, args):
    """Note metadata."""
    date = datetime.datetime.today().isoformat(timespec="seconds")
    title = " ".join(args)

    builder.write("---")
    builder.write(f"Date: {date}")
    builder.write(f"Title: {title}")
    builder.write("Tags:")
    builder.write("References:")
    builder.write("ISBN:")
    builder.write("URL:")
    builder.write("Author:")
    builder.write("Year:")
    builder.write("Month:")
    builder.write("---")
    builder.write("")

    if title:
        builder.write("# " + title)
        builder.write("")


def _expand_awkbasic(builder, args):
    """AWK basic program structure."""
    builder.write("#!/usr/bin/awk -f")
    builder.write("")
    builder.write("BEGIN {")
    builder.indent()
    builder.write("# setup")
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("/pattern/ {")
    builder.indent()
    builder.write("# action")
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("END {")
    builder.indent()
    builder.write("# summary")
    builder.dedent()
    builder.write("}")


def _expand_awkfields(builder, args):
    """AWK field processing examples."""
    builder.write("# Field variables")
    builder.write("# $0  - entire line")
    builder.write("# $1  - first field")
    builder.write("# NF  - number of fields")
    builder.write("# NR  - record number")
    builder.write("# FS  - field separator (default: whitespace)")
    builder.write("# OFS - output field separator (default: space)")
    builder.write("")
    builder.write("# Print specific fields")
    builder.write("{ print $1, $3 }")
    builder.write("")
    builder.write("# Process all fields")
    builder.write("{ ")
    builder.indent()
    builder.write("for (i = 1; i <= NF; i++)")
    builder.indent()
    builder.write("sum += $i")
    builder.dedent()
    builder.dedent()
    builder.write("}")


def _expand_awkfunc(builder, args):
    """AWK built-in functions."""
    builder.write("# String functions")
    builder.write("# length(s)   - length of s")
    builder.write("# index(s, t) - position of t in s, or 0")
    builder.write("# match(s, r) - position of regex r in s or 0")
    builder.write("# split(s, a, fs) - split s into array a using fs")
    builder.write("# sub(r, s)   - substitute s for first match of r")
    builder.write("# gsub(r, s)  - substitute s for all matches of r")
    builder.write("# substr(s, p, n) - n-char substring of s from p")
    builder.write("")
    builder.write("# Examples")
    builder.write("{ ")
    builder.indent()
    builder.write("# character count")
    builder.write("n = length($1)")
    builder.write("")
    builder.write("# uppercase (non-standard, use loop instead)")
    builder.write("# Standard way to uppercase:")
    builder.write('up = ""')
    builder.write("for (i = 1; i <= length($1); i++) {")
    builder.indent()
    builder.write("c = substr($1, i, 1)")
    builder.write('if (c >= "a" && c <= "z")')
    builder.indent()
    builder.write('c = sprintf("%c", ord(c) - 32)')
    builder.dedent()
    builder.write("up = up c")
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("# replace text")
    builder.write('gsub(/old/, "new")')
    builder.dedent()
    builder.write("}")


def _expand_awkarray(builder, args):
    """AWK array operations."""
    builder.write("BEGIN {")
    builder.indent()
    builder.write("# associative arrays")
    builder.write('count["red"] = 5')
    builder.write('count["blue"] = 7')
    builder.write("")
    builder.write("# iterate over array")
    builder.write("for (c in count)")
    builder.indent()
    builder.write("print c, count[c]")
    builder.dedent()
    builder.write("")
    builder.write("# check if key exists")
    builder.write('if ("red" in count)')
    builder.indent()
    builder.write('print "found red:", count["red"]')
    builder.dedent()
    builder.write("")
    builder.write("# delete element")
    builder.write('delete count["red"]')
    builder.write("")
    builder.write("# multi-dimensional arrays")
    builder.write('items["fruit", "apple"] = 5')
    builder.write('items["veg", "carrot"] = 10')
    builder.dedent()
    builder.write("}")


def _expand_awkcsv(builder, args):
    """AWK CSV file processing."""
    builder.write('BEGIN { FS = ","; hdr = 0 }')
    builder.write("")
    builder.write("# process header")
    builder.write("NR == 1 {")
    builder.indent()
    builder.write("for (i = 1; i <= NF; i++)")
    builder.indent()
    builder.write("col[i] = $i")
    builder.dedent()
    builder.write("hdr = 1")
    builder.write("next")
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("# process data rows")
    builder.write("{")
    builder.indent()
    builder.write("for (i = 1; i <= NF; i++)")
    builder.indent()
    builder.write("row[col[i]] = $i")
    builder.dedent()
    builder.write("")
    builder.write("# use column by name")
    builder.write('print row["price"] * row["quantity"]')
    builder.dedent()
    builder.write("}")


def _expand_awkgroup(builder, args):
    """AWK grouping and summarizing data."""
    builder.write("# Group and sum by first field")
    builder.write("{")
    builder.indent()
    builder.write("sum[$1] += $2")
    builder.write("cnt[$1]++")
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("END {")
    builder.indent()
    builder.write("for (grp in sum) {")
    builder.indent()
    builder.write('printf("%s: %d items, sum = %.2f, avg = %.2f\\n",')
    builder.indent()
    builder.write("grp, cnt[grp], sum[grp], sum[grp]/cnt[grp])")
    builder.dedent()
    builder.dedent()
    builder.write("}")
    builder.dedent()
    builder.write("}")


def _expand_awkformat(builder, args):
    """AWK formatting output."""
    builder.write("# printf formats")
    builder.write("# %d - decimal integer")
    builder.write("# %s - string")
    builder.write("# %f - floating point")
    builder.write("# %.2f - float with 2 decimals")
    builder.write("# %10s - right-justify in 10 chars")
    builder.write("# %-10s - left-justify in 10 chars")
    builder.write("")
    builder.write("# table-like output")
    builder.write("BEGIN {")
    builder.indent()
    builder.write('printf("%-10s %6s %8s\\n", "Item", "Count", "Price")')
    builder.write('printf("%-10s %6s %8s\\n", "----", "-----", "-----")')
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("{")
    builder.indent()
    builder.write('printf("%-10s %6d %8.2f\\n", $1, $2, $3)')
    builder.dedent()
    builder.write("}")


def _expand_awkmath(builder, args):
    """AWK math operations."""
    builder.write("# arithmetic operators: + - * / % ^")
    builder.write("# math functions (standard)")
    builder.write("# sqrt(x)   - square root")
    builder.write("# int(x)    - integer part of x")
    builder.write("# rand()    - random number between 0 and 1")
    builder.write("# srand(x)  - set seed for rand()")
    builder.write("")
    builder.write("# basic stats example")
    builder.write("{")
    builder.indent()
    builder.write("sum += $1")
    builder.write("sumsq += $1 * $1")
    builder.write("n++")
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("END {")
    builder.indent()
    builder.write("if (n > 0) {")
    builder.indent()
    builder.write("mean = sum / n")
    builder.write("var = sumsq / n - mean * mean")
    builder.write("stddev = sqrt(var)")
    builder.write('print "mean =", mean, "std dev =", stddev')
    builder.dedent()
    builder.write("}")
    builder.dedent()
    builder.write("}")


def _expand_awkregex(builder, args):
    """AWK regex patterns."""
    builder.write("# regex operators")
    builder.write("# /pattern/  - match pattern")
    builder.write("# ~ /pattern/ - match pattern")
    builder.write("# !~ /pattern/ - not match pattern")
    builder.write("")
    builder.write("# regex examples")
    builder.write('/^[0-9]+$/ { print $0 " is a number" }')
    builder.write("")
    builder.write('$1 ~ /^[A-Z][a-z]+$/ { print $1 " starts with capital" }')
    builder.write("")
    builder.write("# extract with regex (basic matching)")
    builder.write("{")
    builder.indent()
    builder.write("if (match($0, /[0-9]+-[0-9]+/)) {")
    builder.indent()
    builder.write("matched = substr($0, RSTART, RLENGTH)")
    builder.write("# Split manually since we can't rely on capture groups")
    builder.write("n = split(matched, parts, /-/)")
    builder.write("if (n == 2)")
    builder.indent()
    builder.write('print "range from", parts[1], "to", parts[2]')
    builder.dedent()
    builder.dedent()
    builder.write("}")
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("# scan a string for multiple matches")
    builder.write("{")
    builder.indent()
    builder.write("# find all numbers in a string")
    builder.write('s = "There are 42 apples and 17 oranges"')
    builder.write("pos = 1")
    builder.write("while (pos <= length(s)) {")
    builder.indent()
    builder.write("# look for next digit sequence starting from pos")
    builder.write("if (match(substr(s, pos), /[0-9]+/)) {")
    builder.indent()
    builder.write("# found a match, get its actual position in original string")
    builder.write("matchpos = pos + RSTART - 1")
    builder.write("number = substr(s, matchpos, RLENGTH)")
    builder.write('print "Found number:", number, "at position", matchpos')
    builder.write("# move past this match for next iteration")
    builder.write("pos = matchpos + RLENGTH")
    builder.dedent()
    builder.write("} else {")
    builder.indent()
    builder.write("# no more matches")
    builder.write("break")
    builder.dedent()
    builder.write("}")
    builder.dedent()
    builder.write("}")
    builder.dedent()
    builder.write("}")


def _expand_awkfile(builder, args):
    """AWK file operations."""
    builder.write("# read from multiple input files")
    builder.write("# awk 'program' file1 file2")
    builder.write("")
    builder.write("# knowing which file is being processed")
    builder.write('FILENAME == "data.txt" { print "In data.txt:", $0 }')
    builder.write("")
    builder.write("# write to file")
    builder.write("{")
    builder.indent()
    builder.write('print $1 > "results.txt"   # overwrites file')
    builder.write('print $2 >> "append.txt"   # appends to file')
    builder.write('print $3 | "sort"          # pipe to command')
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("# close file explicitly (good practice)")
    builder.write("END {")
    builder.indent()
    builder.write('close("results.txt")')
    builder.write('close("append.txt")')
    builder.write('close("sort")')
    builder.dedent()
    builder.write("}")


def _expand_awksys(builder, args):
    """AWK system commands."""
    builder.write("# run system command")
    builder.write("BEGIN {")
    builder.indent()
    builder.write("# execute command (portable)")
    builder.write('system("ls -l")')
    builder.dedent()
    builder.write("}")
    builder.write("")
    builder.write("# read command output (portable)")
    builder.write("{")
    builder.indent()
    builder.write('cmd = "grep " $1 " /etc/passwd"')
    builder.write("while ((cmd | getline) > 0)")
    builder.indent()
    builder.write("print $0")
    builder.dedent()
    builder.write("close(cmd)")
    builder.dedent()
    builder.write("}")


# Register all snippets
SNIPPETS = {
    "shlog": _expand_shlog,
    "shopts": _expand_shopts,
    "shdir": _expand_shdir,
    "shcase": _expand_shcase,
    "pyargs": _expand_pyargs,
    "pyfilter": _expand_pyfilter,
    "pydir": _expand_pydir,
    "nfile": _expand_nfile,
    "nmeta": _expand_nmeta,
    "awkbasic": _expand_awkbasic,
    "awkfields": _expand_awkfields,
    "awkfunc": _expand_awkfunc,
    "awkarray": _expand_awkarray,
    "awkcsv": _expand_awkcsv,
    "awkgroup": _expand_awkgroup,
    "awkformat": _expand_awkformat,
    "awkmath": _expand_awkmath,
    "awkregex": _expand_awkregex,
    "awkfile": _expand_awkfile,
    "awksys": _expand_awksys,
}


if __name__ == "__main__":
    sys.exit(main() or 0)
