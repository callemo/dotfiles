#!/usr/bin/env python3
"""Expand text snippets."""
import argparse
import datetime
import re
import sys


def main():
    parser = ArgumentParser()
    parser.add_argument("-t", "--tab", default="\t", help="indent string")
    parser.add_argument("snippet")
    parser.add_argument("args", nargs="*")
    args = parser.parse_args()
    print(Snippet(args.snippet, args.args, args.tab))


class ArgumentParser(argparse.ArgumentParser):
    """Command line argument parser."""

    def print_help(self, file=sys.stdout):
        prefix = "expand_"
        prefix_len = len(prefix)

        # A list of snippets with their document string
        snippets = []
        for name in dir(Snippet):
            if not name.startswith(prefix):
                continue
            doc = getattr(Snippet, name).__doc__
            if doc:
                snippets.append((name[prefix_len:], doc))

        super().print_help(file)
        print("\nsnippets:", file=file)
        for snip, doc in snippets:
            print(f"  {snip} - {doc}", file=file)


class Snippet:
    """Expands and prints a snippet text."""

    def __init__(self, name, args=None, tab="\t"):
        if not args:
            args = []
        self.name = name
        self.args = args
        self.tab = tab
        self.code = CodeGenerator(self.tab)

    def __str__(self):
        return self.expand()

    def __repr__(self):
        return f"{self.__class__.__name__}:[name:{self.name} args:{self.args}]"

    def expand(self):
        return getattr(self, "expand_" + self.name)()

    def expand_shlog(self):
        """Shell logging."""
        self.code.write('prefix="${0##*/}:"')
        self.code.write('log() { echo "$prefix" "$@" >&2; }')
        self.code.write('fatal() { log "$@"; exit 1; }')
        return self.code.text()

    def expand_shopts(self):
        """Shell options."""
        optstring = self.args[0] if self.args else ":abc:"
        if optstring[0] != ":":
            optstring = ":" + optstring
        self.code.write("usage() { sed -En '2,/^[^#]/ s/^# //p' \"$0\" >&2; }")
        self.code.write("")
        self.code.write(f"while getopts {optstring} f")
        self.code.write("do")
        self.code.indent()
        self.code.write("case $f in")
        last = len(optstring) - 1
        for i, v in enumerate(optstring):
            if v == ":":
                continue
            if i < last and optstring[i + 1] == ":":
                self.code.write(f"{v})  {v}arg=$OPTARG;;")
            else:
                self.code.write(f"{v})  {v}flag=$f;;")
        self.code.write("\\?) usage; exit 2;;")
        self.code.write("esac")
        self.code.dedent()
        self.code.write("done")
        self.code.write("shift $((OPTIND - 1))")
        return self.code.text()

    def expand_shdir(self):
        """Shell program directory."""
        self.code.write('progdir="$(cd "${0%/*}" && pwd -P)"')
        return self.code.text()

    def expand_shcase(self):
        """Shell case statement."""
        self.code.write("case $1 in")
        self.code.indent()
        for i in self.args:
            self.code.write(f"{i}) {i};;")
        self.code.write("* ) usage; exit 2;;")
        self.code.dedent()
        self.code.write("esac")
        return self.code.text()

    def expand_pyargs(self):
        """Python command line arguments."""
        optstring = self.args[0] if self.args else "abc:"
        self.code.write("parser = argparse.ArgumentParser()")
        last = len(optstring) - 1
        for i, v in enumerate(optstring):
            if v == ":":
                continue
            if i < last and optstring[i + 1] == ":":
                self.code.write(f'parser.add_argument("-{v}")')
            else:
                self.code.write(f'parser.add_argument("-{v}", action="store_true")')
        self.code.write("args = parser.parse_args()")
        return self.code.text()

    def expand_pyfilter(self):
        """Python command line filter."""
        self.code.write("#!/usr/bin/env python3")
        self.code.write('"""Command line filter."""')
        self.code.write("import argparse")
        self.code.write("import fileinput")
        self.code.write("import os")
        self.code.write("import sys")
        self.code.write("\n")
        self.code.write("def main():")
        self.code.indent()
        self.code.write("parser = argparse.ArgumentParser()")
        self.code.write('parser.add_argument("files", nargs="*")')
        self.code.write("args = parser.parse_args()")
        self.code.write("with fileinput.input(files=args.files) as f:")
        self.code.indent()
        self.code.write("for line in f:")
        self.code.indent()
        self.code.write('print(line, end="")')
        self.code.dedent()
        self.code.dedent()
        self.code.dedent()
        self.code.write("\n")
        self.code.write("try:")
        self.code.indent()
        self.code.write("main()")
        self.code.write("sys.stdout.flush()")
        self.code.dedent()
        self.code.write("except (BrokenPipeError, KeyboardInterrupt):")
        self.code.indent()
        self.code.write(
            "os.dup2(os.open(os.devnull, os.O_WRONLY), sys.stdout.fileno())"
        )
        return self.code.text()

    def expand_pydir(self):
        """Python program directory."""
        self.code.write("progdir = os.path.realpath(os.path.dirname(__file__))")
        return self.code.text()

    def expand_nfile(self):
        """Note file name."""
        note_id = datetime.datetime.today().strftime("%Y%m%d%H%M")
        title = "_".join(self.args)
        title = re.sub("[^A-Za-z_-]", "", title)
        return note_id + "-" + title.lower() + ".txt"

    def expand_nmeta(self):
        """Note metadata."""
        date = datetime.datetime.today().isoformat(timespec="seconds")
        title = " ".join(self.args)
        self.code.write("---")
        self.code.write(f"Date: {date}")
        self.code.write(f"Title: {title}")
        self.code.write("Tags:")
        self.code.write("References:")
        self.code.write("ISBN:")
        self.code.write("URL:")
        self.code.write("Author:")
        self.code.write("Year:")
        self.code.write("Month:")
        self.code.write("---")
        self.code.write("")
        if title:
            self.code.write("# " + title)
            self.code.write("")
        return self.code.text()


class CodeGenerator:
    """Generates indented code."""

    def __init__(self, tab="\t"):
        self.tab = tab
        self.level = 0
        self.lines = []

    def write(self, line):
        self.lines.append(self.tab * self.level + line)

    def indent(self):
        self.level += 1

    def dedent(self):
        if self.level < 1:
            raise IndentationError("code generator line: {len(self.lines)}")
        self.level -= 1

    def text(self):
        return "\n".join(self.lines)


main()
