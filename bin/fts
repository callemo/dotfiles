#!/bin/sh
# usage: fts [flags] query
# Provides full-text search for plain, markdown, html, and other text files.
# See https://www.sqlite.org/fts5.html#full_text_query_syntax for the complete syntax.
# Flags:
#   -H Highlight matches for terminal output.
#   -i Rebuild the file index.
#   -n Near search (approximately in the same paragraph).

readonly db=fts.db

hflag=
iflag=
nflag=
while getopts :Hin i
do
    case $i in
    H)  hflag=1 ;;
    i)  iflag=1 ;;
    n)  nflag=1 ;;
    \?) sed -En '2,/^[^#]/ s/^# //p' "$0" >&2; exit 2 ;;
    esac
done
shift $((OPTIND - 1))

if [ -n "$iflag" ] && [ -e "$db" ]
then
    rm "$db"
fi

if [ ! -e "$db" ]
then
    sqlite3 "$db" <<EOF
create virtual table files
    using fts5(file,
               content,
               indexed_at unindexed,
               prefix='2 3 4',
               tokenize='porter');
EOF
fi

if [ -n "$iflag" ]
then
    d="$(date +%s)"
    find . -type f | grep -Ev '(\.git/|'"$db"'$)' | sed 's/^\.\///' |
        while read -r i
        do
            sqlite3 "$db" <<EOF
insert into files(file, content, indexed_at)
    values('$i',
           '$(LC_CTYPE=C sed -E 's/(['\''"])/\\1/g' "$i")',
           '$d')
EOF
        done
fi

if [ $# -gt 0 ]
then
    hfile=
    hstart=
    hend=
    if [ -n "$hflag" ]
    then
        hfile="$(tput bold)"
        hstart="$(tput bold)$(tput setaf 1)"
        hend="$(tput sgr0)"
    fi
    q="$*"
    if [ -n "$nflag" ]
    then
        q="NEAR($q, 100)"
    fi
    sqlite3 -separator ' ' "$db" <<EOF
        select '$hfile' || file || '$hend' || ':',
            replace(snippet(files, 1, '$hstart', '$hend', 'â€¦', 10),
                    '
',
                    ' ')
        from files
        where files match '$q'
        order by rank;
EOF
fi
